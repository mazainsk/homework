# ЗАДАЧА: для каждого числа из приведенного списка определить, является ли оно простым или не простым (составным) и
# записать это число в соответствующий список и вывести оба списка в консоль

# Вариант 1, максимально точно к формулировке заданного алгоритма решения задачи
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
primes = []
not_primes = []
for i in numbers:
    is_prime = True     # переменная-флаг для каждого нового элемента списка по-умолчанию устанавливается в True
    if i == 1:          # число 1 по условию задачи игнорируем и переходим к следующему
        continue
    elif i > 2:         # число 2 проверять на простоту не нужно, поэтому вложенный цикл ниже только для чисел > 2
        for j in range(2, i):   # перебираем с шагом в 1 все числа-делители от 2 до числа в списке, не включая само
                                # число
            if i % j == 0:          # если остаток от деления = 0, то досрочно выходим из цикла перебора делителей, т.к.
                is_prime = False    # мы определили, что число не является простым
                break
    if is_prime:            # если флаг = True, значит записать число в список простых
        primes.append(i)
    else:                   # если флаг = False, значит записать число в список не простых
        not_primes.append(i)
print('Результаты для варианта решения № 1:')
print('Primes:', primes)
print('Not Primes:', not_primes)

# Вариант 2, без использования переменной-флага 'is_prime'
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
primes = []
not_primes = []
for i in numbers:
    if i == 1:
        continue
    elif i == 2:
        primes.append(i)        # число 2 сразу записываем в список простых
    else:
        for j in range(2, i):
            if not i % j:              # если нашелся делитель с результатом деления без остатка,
                not_primes.append(i)    # то сразу записываем число в список не простых
                break                   # и досрочно прерываем цикл перебора делителей
        else:                   # оператор ELSE для цикла FOR определяет код, выполняемый для случая штатного
            primes.append(i)    # окончания цикла (в случае досрочного выхода по BREAK этот код выполняться не будет)
print('Результаты для варианта решения № 2:')
print('Primes:', primes)
print('Not Primes:', not_primes)

# Вариант 3
is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))
# Функция проверки, что число n больше 1 и не делится нацело на какие-либо числа от 2 до квадратного корня из n
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
primes = []
not_primes = []
# разбор списковым включением
[primes.append(n) if is_prime(n) else not_primes.append(n) for n in numbers if n > 1]
print('Результаты для варианта решения № 3:')
print('Primes:', primes)
print('Not Primes:', not_primes)